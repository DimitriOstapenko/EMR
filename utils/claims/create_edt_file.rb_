# Create EDT format file  
# ARG: filename in EDT directory
#
# verify that service date is before submit date
#

require_relative '../../config/environment'

$cre_date_str = Date.today.strftime("%Y%m%d")
$batch_id = '0635'     # provider agent generated, sequential 1..9999 edt_files.id.to_s.rjust(4,'0') 

def hcp_procedure?(proc_code)
    Procedure.find_by(code: proc_code).ptype == PROC_TYPES[:HCP] rescue false
end

def heb_record(v, date, batch)
    "HEBV03 #{date}#{batch}#{' '*6}#{GROUP_NO}#{v.doctor.provider_no}00".ljust(79,' ') + "\r\n"
end

def heh_record(v, pat)
    "HEH#{pat.ohip_num}#{pat.ohip_ver}#{pat.dob.strftime("%Y%m%d")}#{v.id.to_s.rjust(8,'0')}HCPP".ljust(79,' ') +"\r\n"
end

def het_record( v, num, date )
    case num
      when 1
        pcode = v.proc_code; fee = v.fee; units = v.units; dcode = v.diag_code
      when 2
        pcode = v.proc_code2; fee = v.fee2; units = v.units2; dcode = v.diag_code2
      when 3
        pcode = v.proc_code3; fee = v.fee3; units = v.units3; dcode = v.diag_code3
      when 4
        pcode = v.proc_code4; fee = v.fee4; units = v.units4; dcode = v.diag_code4
      else
        return ''
      end
     return "HET#{pcode}  #{(fee*units*100).to_i.to_s.rjust(6,'0')}#{units.to_s.rjust(2,'0')}#{date}#{dcode.to_i.to_s.rjust(3,'0')}".ljust(79,' ') + "\r\n"
end

def her_record(pat)
    "HER#{pat.ohip_num.ljust(12,' ')}#{pat.lname[0,9].ljust(9,' ')}#{pat.fname[0,5].ljust(5,' ')}#{DIG_SEXES[pat.sex]}#{pat.hin_prov}".ljust(79,' ') + "\r\n"
end

def hee_record( heh_count, her_count, het_count )
    "HEE#{heh_count.to_s.rjust(4,'0')}#{her_count.to_s.rjust(4,'0')}#{het_count.to_s.rjust(5,'0')}".ljust(79,' ') + "\r\n"
end

def generate_file_for_doc( filespec, visits )
      heh_count = het_count = her_count = 0
      begin
      file = File.open(filespec, 'w')
      vfirst = visits.first
      last_doc_id = vfirst.doc_id
      file.write( heb_record(vfirst, $cre_date_str, $batch_id) )
      visits.all.each do |v| 
        pat = Patient.find(v.patient_id)
        if (v.doc_id != last_doc_id)
          file.write( hee_record(heh_count, her_count, het_count) )
          heh_count = het_count = her_count = 0
	        last_doc_id = v.doc_id
          file.write( heb_record(v, $cre_date_str, $batch_id) )
	end
	if hcp_procedure?(v.proc_code) 
          file.write( heh_record(v,pat) )
	  heh_count += 1
#!!	  v.update_attribute(:status, BILLED) 
	  v.update_attribute(:export_file, filespec.basename) 
	  if v.bil_type == RMB_BILLING  		# only 1 RMB claim supported per visit right now	
	    file.write( her_record(pat) )
	    her_count +=1
	  end
	  file.write( het_record(v, 1, v.date_str) )
	  het_count += 1
	end
        if !v.proc_code2.blank? && hcp_procedure?(v.proc_code2) 
	  file.write( het_record(v, 2, v.date_str) )
	  het_count += 1
        end
        if !v.proc_code3.blank? && hcp_procedure?(v.proc_code3) 
	  file.write( het_record(v, 3, v.date_str) )
	  het_count += 1
        end
        if !v.proc_code4.blank? && hcp_procedure?(v.proc_code4) 
	  file.write( het_record(v, 4, v.date_str) )
	  het_count += 1
        end
        last_doc_id = v.doctor.id
      end 
      
      file.write( hee_record(heh_count, her_count, het_count) )
      rescue Errno::ENOENT => e
	  puts e.message.inspect
	  error = 1
      ensure
       file.close 
      end
end

date = Date.new(2018,9,1)  	# we look for visits on this date
ext =  '003'          		# provider agent generated, sequential 1..31, unique for each submission during current month
month_letter = 'ABCDEFGHIJKL'[Time.now.month-1]

# Which doctors worked on that day?
docs = Visit.where("date(entry_ts)=?", date).group(:doc_id).pluck(:doc_id)
docs.each do |doc_id|
  doc = Doctor.find(doc_id)
  fname = "H#{month_letter}#{doc.provider_no}.#{ext}" 
  filespec = EDT_PATH.join(fname)
  puts "will write into file #{fname} for Dr. #{doc.lname}"
  visits = Visit.where("status=? AND date(entry_ts)=? AND doc_id=?", READY, date, doc_id)
  next unless visits.any?
  generate_file_for_doc(filespec,visits)
end

